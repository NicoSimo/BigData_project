services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
      DATABASE_NAME: ${DATABASE_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - backend
    restart: on-failure
    
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    platform: linux/amd64
    ports:
      - "2181:2181"
    networks:
      - backend
    restart: on-failure

  kafka1:
    container_name: kafka1
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka1:9092,OUTSIDE://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - kafka-data1:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - backend
    restart: on-failure

  kafka2:
    container_name: kafka2
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka2:9093,OUTSIDE://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - kafka-data2:/var/lib/kafka/data
    ports:
      - "9093:9093"
      - "29093:29093"
    networks:
      - backend
    restart: on-failure

  kafka3:
    container_name: kafka3
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka3:9094,OUTSIDE://localhost:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9094,OUTSIDE://0.0.0.0:29094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - kafka-data3:/var/lib/kafka/data
    ports:
      - "9094:9094"
      - "29094:29094"
    networks:
      - backend
    restart: on-failure

  kafka4:
    container_name: kafka4
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka4:9095,OUTSIDE://localhost:29095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9095,OUTSIDE://0.0.0.0:29095
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - kafka-data4:/var/lib/kafka/data
    ports:
      - "9095:9095"
      - "29095:29095"
    networks:
      - backend
    restart: on-failure

  main_app:
    container_name: main_app
    env_file: 
      - ./.env
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - kafka4
      - redis
      - postgres
    volumes:
      - main-app-data:/app/data
      - ${LOCAL_DATA_PATH}:/app/new_data
      - .:/app/
    networks:
      - backend
      - frontend

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana.ini:/etc/grafana/grafana.ini
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources
    env_file: 
      - ./grafana.env  
    networks:
      - backend
      - frontend
    depends_on:
      - postgres

volumes:
  postgres-data:
  kafka-data1:
  kafka-data2:
  kafka-data3:
  kafka-data4:
  redis-data:
  main-app-data:
  grafana-data:

networks:
  backend:
  frontend: