services:
  postgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: 'Team3'
      POSTGRES_DB: energy_consumption
    volumes:
      - postgres-data:/var/lib/postgresql/data

    # Connects the service to the backend network.
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"] # Command to test the service's health.
      interval: 10s # Time between checks.
      timeout: 5s # Time to wait before considering the check failed.
      retries: 5 # Number of retries before marking the service as unhealthy.
    restart: on-failure # Restarts the container on failure.

  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend
    restart: on-failure # Restarts the container on failure.

  zookeeper:
    image: wurstmeister/zookeeper
    platform: linux/amd64
    ports:
      - "2181:2181"
    networks:
      - backend
    restart: on-failure # Restarts the container on failure.

  kafka:
    image: wurstmeister/kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_CREATE_TOPICS: "energy_consumption_topic:3:3" # Creates a topic named "energy_consumption_topic" with 3 partitions and 3 replicas.
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # Connects Kafka to Zookeeper.
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093 # Defines the addresses the broker should listen on.
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - kafka-data:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "9093:9093"

    # Connects the service to both backend and frontend networks.
    networks:
      - backend
      - frontend
    restart: on-failure

  main_app:
    build:
      context: . # The build context ('.' selects the current directory).
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      - KAFKA_BROKER=kafka:9092
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - UPDATE_TIME = 60 # Time in seconds used to send the data through kafka and to update the data in redis.
    volumes:
      - main-app-data:/app/data # A named volume for application data.
      - ${LOCAL_DATA_PATH}:/app/new_data # A bind mount for local data files to move the data from local host to container.
      - .:/app/

    # Connects the service to both backend and frontend networks.
    networks:
      - backend
      - frontend

volumes:
  postgres-data:
  kafka-data:
  redis-data:
  main-app-data:

networks:
  backend: # A network for internal communication between backend services.
  frontend: # A network for services that might need to communicate externally or have different communication requirements.
